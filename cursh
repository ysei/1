#!/usr/local/bin/ruby

# Curshell the easy-operator  Written by Seisei Yamaguchi


require 'curses'
include Curses
#require 'ftools'
#require 'open3'

# udlr : ^[[A^[[B^[[C^[[D
#>> def x(key, value, optional={}); p key; p value; p optional; end 
#=> nil 
#>> x("foo", "bar", :context => 123, :time => 456, :type => 789) 
#"foo" 
#"bar" 
#{:time=>456, :type=>789, :context=>123} 
#=> nil 

def win__generate( num_a__win , str__win__name )
#	obj__win = ''
	if $str_a__win__generated.size != 0 then
		$win[ $str_a__win__generated.size ] = $win[ $num_h__win__id[ 'base' ] ].subwin( *num_a__win )
#		obj__win = $win[ $num_h__win__id[ 'base' ] ].subwin( *num_a__win )
	else
		$win[ $str_a__win__generated.size ] = Window.new( *num_a__win )
#		obj__win = Window.new( *num_a__win )
	end
	$str_a__win__generated.push str__win__name
#	$win[ $str_a__win__generated.size ] = obj__win.clone
	return $str_a__win__generated.size - 1
end
def win__close( num__win__id )
	$str_a__win__generated.pop
	$win[ num__win__id ].close
end
def init__curses()
#	p ""
	init_screen
#	close_screen
	noecho
#	raw
	$num__size__screen__y = lines
	$num__size__screen__x = cols
	num__size__window__y = $num__size__screen__y
	num__size__window__x = $num__size__screen__x

	str_a__win__kind = [ 'base' , 'inkey' , 'back__0' , 'dir_list' , 'path' , 'status_line' , 'log' , 'info' , 'front__0' ]
	num_h__win__locate__y = {}
	num_h__win__locate__y[ 'status_line' ] = Integer( num__size__window__y - 5 ) - ( ( num__size__window__y - 25 ) / 10 ) >> 1 << 1
	num_h__win__locate__y[ 'log' ] = num_h__win__locate__y[ 'status_line' ] + 1

	num_h__win__size__y = {}
	num_h__win__size__y[ 'path' ] = 1
	num_h__win__size__y[ 'status_line' ] = 1
	num_h__win__size__y[ 'info' ] = 4
	num_h__win__size__y[ 'log' ] = $num__size__screen__y - ( num_h__win__locate__y[ 'status_line' ] + 1 )

	num_aah__win = {}
	num_aah__win[ 'base' ] = [ [ num__size__window__y , num__size__window__x , 0 , 0 ] ]
	num_aah__win[ 'inkey' ] = [ [ 0 , 0 , 0 , 0 ] ]
	num_aah__win[ 'back__0' ] = [ [ num__size__window__y , num__size__window__x , 0 , 0 ] ]
	num_aah__win[ 'status_line' ] = [ [ num_h__win__size__y[ 'status_line' ] - 1 , num__size__window__x , num_h__win__locate__y[ 'status_line' ] , 0 ] ]
	num_aah__win[ 'log' ] = [ [ num_h__win__size__y[ 'log' ] , num__size__window__x , num_h__win__locate__y[ 'log' ] , 0 ] ]
	num_aah__win[ 'front__0' ] = [ [ num__size__window__y , num__size__window__x , 0 , 0 ] ]

	num_h__win__size__y[ 'dir_list' ] = ( num_h__win__locate__y[ 'status_line' ] - num_h__win__size__y[ 'info' ] - num_h__win__size__y[ 'path' ] )
	if $num__size__screen__x < 128 then
		num_h__win__size__y[ 'dir_list' ] >>= 1
		$num__size__dirlist__y = num_h__win__size__y[ 'dir_list' ]
		$num__size__dirlist__x = num__size__window__x

		num_aah__win[ 'dir_list' ] = [
			[ num_h__win__size__y[ 'dir_list' ] , $num__size__dirlist__x , 0 , 0 ] ,
			[ num_h__win__size__y[ 'dir_list' ] , $num__size__dirlist__x , num_h__win__size__y[ 'dir_list' ] + num_h__win__size__y[ 'info' ] + num_h__win__size__y[ 'path' ] * 2 , 0 ]
		]
		num_aah__win[ 'path' ] = [
			[ num_h__win__size__y[ 'path' ] , num__size__window__x , $num__size__dirlist__y , 0 ] ,
			[ num_h__win__size__y[ 'path' ] , num__size__window__x , $num__size__dirlist__y + num_h__win__size__y[ 'info' ] + num_h__win__size__y[ 'path' ] , 0 ]
		]
		num_aah__win[ 'info' ] = [ [ num_h__win__size__y[ 'info' ] , num__size__window__x , $num__size__dirlist__y + num_h__win__size__y[ 'path' ] , 0 ] ]

		$num_a__locate__dirlist = [ [ 0 , 0 ] , [ num_h__win__size__y[ 'info' ] + num_h__win__size__y[ 'path' ] * 2 + num_h__win__size__y[ 'dir_list' ] , 0 ] ]
	else
		$num__size__dirlist__y = num_h__win__size__y[ 'dir_list' ]
		$num__size__dirlist__x = num__size__window__x >> 1
		$num__size__dirlist__x -= 1 if num__size__window__x % 2 == 0

		num_aah__win[ 'dir_list' ] = [
			[ num_h__win__size__y[ 'dir_list' ] , $num__size__dirlist__x , num_h__win__size__y[ 'info' ] + 1 , 0 ] ,
			[ num_h__win__size__y[ 'dir_list' ] , $num__size__dirlist__x , num_h__win__size__y[ 'info' ] + 1 , ( num__size__window__x >> 1 ) + 1 ]
		]
		num_aah__win[ 'path' ] = [
			[ num_h__win__size__y[ 'path' ] , $num__size__dirlist__x , num_h__win__size__y[ 'info' ] , 0 ] ,
			[ num_h__win__size__y[ 'path' ] , $num__size__dirlist__x , num_h__win__size__y[ 'info' ] , ( num__size__window__x >> 1 ) + 1 ]
		]
		num_aah__win[ 'info' ] = [ [ num_h__win__size__y[ 'info' ] - 1 , num__size__window__x , 0 , 0 ] ]

		$num_a__locate__dirlist = [ [ num_h__win__size__y[ 'info' ] + num_h__win__size__y[ 'path' ] , 0 ] ,
			[ num_h__win__size__y[ 'info' ] + num_h__win__size__y[ 'path' ] , ( num__size__window__x >> 1 ) + 1 ] ]
	end

	$win = {}
	$num_h__win__id = {}
	$str_a__win__generated = []

	while str__win__name = str_a__win__kind.shift
		num__win__this_kind = 0
		$num_h__win__id[ str__win__name ] = $str_a__win__generated.size
		while num__win__this_kind < num_aah__win[ str__win__name].size
			win__generate( num_aah__win[ str__win__name ][ num__win__this_kind ] , str__win__name )
			num__win__this_kind += 1
		end
	end

	thread__inkey 'start'
end
def thread__inkey( start_stop )
	case start_stop
	when 'start'
		$thread__inkey = Thread.start do
			loop do
				while $flag__refleshing
#					sleep 0.000001
				end
				$a__keybuf.push( STDIN.getc ) # if (IO::select([ STDIN ]))
#				$a__keybuf.push( $win[ $num_h__win__id[ 'inkey' ] ].getch )
#				$keycode = STDIN.getc # if (IO::select([ STDIN ])) 
#				$keycode = $win[ 0 ].getch # if (IO::select([ STDIN ]))
#				sleep 0.000001
			end
		end
	when 'stop'
		Thread.kill( $thread__inkey )
	when 'stop__check_and_wait'
		while ! $thread__inkey.stop? 
#			sleep 0.000001
		end
	end
end
def add_str( y , x , win__which , string , flag__standout = false )
#	if x >= 0 and y >= 0 then
		$win[ win__which ].setpos( y , x )
#	end
	$win[ win__which ].standout if flag__standout
	$win[ win__which ].addstr( string )
	$win[ win__which ].standend if flag__standout
end

def round__limit_length( num__src , num__max_length )  # sisya_gonyuu , str_length based ( Include length of '.' ) . 
	num__src = num__src.to_f
	num__diff = num__src.to_s.length - num__max_length
	if num__diff > 0 then
		num__length__str__int_part = num__src.to_i.to_s.length
		return num__src.round if num__src.round.to_s.length >= num__max_length

		if ( num__src - num__src.to_i ).nonzero? then
			flag__1st_only =
				if num__length__str__int_part + 1 == num__max_length then true  # 1 means '.'.length
				else false
				end
			num__shift = num__max_length - num__length__str__int_part - 1  # 1 means '.'.length
			num__shift = 0 if num__shift < 0 or flag__1st_only

			num__src *= 10 ** num__shift
#			num__src = num__src.round.to_f
			num__src = num__src.to_i.to_f
			num__src /= 10 ** num__shift
		else
			return num__src
		end
#		if num__length__str__int_part != num__src.to_i.to_s.length then
	end
	return num__src
end
def str__round__limit_length( num__src , num__max_length )
	return round__limit_length( num__src , num__max_length ).to_s  # .gsub( /\.0$/ ){ '' }
end
def get__str__file_stat( str__filename , str__kind__stat , num__id__list )
	obj = $h__file__stat[ $str_a__path[ num__id__list ] ][ str__filename ]
	case str__kind__stat
	when 'size'
		str__ftype = obj.ftype
		num__columns = 14
		case str__ftype
		when 'file'
			num__size = obj.size
			num__length__size = num__size.to_s.length
			num__max_length__str__size__unit = num__columns - 2 - num__length__size
			str__size__unit = ''  # ex. `` 12.3M '' , `` 7G '' 
			ah__unit = { 'M' => [ 20 , 'dummy' ] , 'G' => [ 30 , 'dummy' ] }
			[ 'G' , 'M' ].each{ | str__letter__unit |
				if num__size > 9.5 * 2 ** ah__unit[ str__letter__unit ][ 0 ] then
					str__size__unit =
						str__round__limit_length( num__size.to_f / ( 1 << ah__unit[ str__letter__unit ][ 0 ] ) , num__max_length__str__size__unit ) + str__letter__unit
					break
				end
			}
			num__spaces = num__columns - str__size__unit.length - num__size.to_s.length
			num__spaces = 0 if num__spaces < 0
			return sprintf( "%s" + ' ' * num__spaces + "%#{ num__columns - str__size__unit.length - num__spaces }d", str__size__unit , num__size )
		else
			return sprintf( "%s%13d", str__ftype[ 0 .. 0 ].upcase , obj.size.to_i )
		end
	when 'mtime'
		return obj.mtime.strftime( '0%Y%m%d %H%M%S' )
	when 'execwrite'
		str_a__mark__execwrite = [ ' ' , '-' , '*' , '+' ]
		num__ptr = 0
#		num__ptr += 1 if ! obj.writable_real?
#		num__ptr += 2 if obj.executable_real?
		num__ptr += 1 if ! obj.writable?
		num__ptr += 2 if obj.executable?
		return sprintf( "%s", str_a__mark__execwrite[ num__ptr ] )
	end
end
def move__cursor__left_right( num__left_right )
#		num_h__left_right = { 'left' => 0 , 'right' => 1 }
#		if $num__active_dirlist == num_h__left_right[ $str__key ] then
		if $num__active_dirlist == num__left_right then
			$flag_a__cd_parent[ $num__active_dirlist ] = true
			$str_a__path__old[ $num__active_dirlist ] = $str_a__path[ $num__active_dirlist ].clone
			dir__chdir '..'
		else
			$num__active_dirlist__old = $num__active_dirlist.clone
			$num__active_dirlist = 1 - $num__active_dirlist
			Dir.chdir $str_a__path[ $num__active_dirlist ]
		end
end
def move__cursor
	num__id__list = $num__active_dirlist
	num__point = $num_a__point_which_file[ num__id__list ]
	str_a__direntry = $aah__direntry[ 'sort' ][ num__id__list ]
	flag__up_down = false

	# $bit__direction  00DUrldu
	str__key = $str_a__key[ 0 ]
		case str__key
		when 'left'
			move__cursor__left_right( 0 )
		when 'right'
			move__cursor__left_right( 1 )
		when 'up'
			num__point -= ( 1 + $num_h__inkey__continue[ str__key ].round )
			$num_a__cur__direction[ num__id__list ] = -1
			$num_h__inkey__continue[ str__key ] += 0.3
			flag__up_down = true
		when 'down'
			num__point += ( 1 + $num_h__inkey__continue[ str__key ].round )
			$num_a__cur__direction[ num__id__list ] = 1
			$num_h__inkey__continue[ str__key ] += 0.3
			flag__up_down = true
		when 'rollup'
			num__point -= $num__size__dirlist__y + $num_h__inkey__continue[ str__key ] / 2
			$num_a__cur__direction[ num__id__list ] = -1
			$num_h__inkey__continue[ str__key ] += 1
			flag__up_down = true
		when 'rolldown'
			num__point += $num__size__dirlist__y + $num_h__inkey__continue[ str__key ] / 2
			$num_a__cur__direction[ num__id__list ] = 1
			$num_h__inkey__continue[ str__key ] += 1
			flag__up_down = true
		when 'space'
			$flag_aa__file__marked[ num__id__list ][ num__point ] =
				! $flag_aa__file__marked[ num__id__list ][ num__point ]
			case $flag_aa__file__marked[ num__id__list ][ num__point ]
			when true
				$num_a__marking[ num__id__list ] += 1
			when false
				$num_a__marking[ num__id__list ] -= 1
			end
			num__point += 1
			flag__up_down = true
		end

		if flag__up_down then
			if num__point < 0 then  # limit check
				num__point = 0
			elsif num__point > str_a__direntry.length - 1
				num__point = str_a__direntry.length - 1
			end

			if ( num__point != 0 or num__point != str_a__direntry.length - 1 ) and
				num__point != $num_a__point_which_file__old[ num__id__list ]
			then
				$num__countdown__force_redraw[ num__id__list ] = 30
			elsif ( num__point == 0 or num__point == str_a__direntry.length - 1 ) and
				$num__countdown__force_redraw[ num__id__list ] > 2 #and
#				$num_a__start__listing_file[ num__id__list ] != $num_a__start__listing_file__old[ num__id__list ]
			then
				$num__countdown__force_redraw[ num__id__list ] = 2
			end
			$num_a__point_which_file[ num__id__list ] = num__point
		else
			[ 'up' , 'down' , 'rollup' , 'rolldown' ].each{ | local__str__key |
				$num_h__inkey__continue[ local__str__key ] -= 1.0
				$num_h__inkey__continue[ local__str__key ] = 0 if $num_h__inkey__continue[ local__str__key ] < 0
			}
		end

	case str__key
	when 'cr'
		if test( ?d , "#{ $str_a__path[ $num__active_dirlist ] }/#{ $aah__direntry[ 'sort' ][ $num__active_dirlist ][ $num_a__point_which_file[ $num__active_dirlist ] ]}" ) then
			dir__chdir "#{ $str_a__path[ $num__active_dirlist ] }/#{ $aah__direntry[ 'sort' ][ $num__active_dirlist ][ $num_a__point_which_file[ $num__active_dirlist ] ]}"
		else
			command__system "most #{ $str_a__path[ $num__active_dirlist ] }/#{ $aah__direntry[ 'sort' ][ $num__active_dirlist ][ $num_a__point_which_file[ $num__active_dirlist ] ]}"
			#	system "less #{ $str_a__path[ $num__active_dirlist ] }/#{ $aah__direntry[ 'sort' ][ $num__active_dirlist ][ $num_a__point_which_file[ $num__active_dirlist ] ]}"
		end
	end
	      
#		case $str__mode
#		when 'jump'
#			$str__mode = 'base'
#			win__close $num__win__jump
#		else
			case str__key
			when 'copy'
				break if $num_a__marking[ $num__active_dirlist ] <= 0
				file__copy( $str_a__path[ $num__active_dirlist ] , "#{ $str_a__path[ 1 - $num__active_dirlist ] }" )
			when 'move'
				break if $num_a__marking[ $num__active_dirlist ] <= 0
				file__move( $str_a__path[ $num__active_dirlist ] , "#{ $str_a__path[ 1 - $num__active_dirlist ] }" )
			when 'kill'
				break if $num_a__marking[ $num__active_dirlist ] <= 0
				file__kill( $str_a__path[ $num__active_dirlist ] )
			when 'mkdir'
				file__mkdir( $str_a__path[ $num__active_dirlist ] )
			when 'jump'
				$str__mode = 'jump'
				num__win__id = win__generate( [ 18 , $num__size__screen__x - 10 , 9 , 10 >> 1 ] , 'jump' )
				$win[ num__win__id ].clear
				$win[ num__win__id ].box( ?| , ?- )
				$win[ num__win__id ].refresh
				$num__win__jump = num__win__id
			when 'edit'
				command__system "emacs #{ $str_a__path[ $num__active_dirlist ] }/#{ $aah__direntry[ 'sort' ][ $num__active_dirlist ][ $num_a__point_which_file[ $num__active_dirlist ] ]}"
			when 'p'
				dir__chdir '/var/ftp/pub/'
			end
#		end
end
def num_a__get__y__locate( num__id__list )
	num__point = $num_a__point_which_file[ num__id__list ]
	num__size__y = $num__size__dirlist__y
	num__dif = num__point - ( num__size__y - 1 )

	num__start__listing = $num_a__start__listing_file[ num__id__list ]
	$num_a__start__listing_file__old[ num__id__list ] = num__start__listing
	num__start__listing = 0 if $aah__direntry[ 'sort' ][ num__id__list ].length <= num__size__y

	num__locate__cur = num__point - num__start__listing

	num__limit = $aah__direntry[ 'sort' ][ num__id__list ].length - 1 - num__start__listing

	if num__point < num__start__listing then
		num__locate__cur = 0
		num__start__listing = num__point
	elsif num__point - num__start__listing > ( num__size__y - 1 ) then
		num__start__listing = num__point - ( num__size__y - 1 )
		num__locate__cur = num__size__y - 1
	end
	num__locate__cur__old = $num_a__locate__cur[ num__id__list ]
	$num_a__locate__cur[ num__id__list ] = num__locate__cur
	$num_a__start__listing_file[ num__id__list ] = num__start__listing
	return num__start__listing , num__locate__cur , num__locate__cur__old
end
def listing__dir__clear_line( num__id__list , num__count__y , flag__standout )
	add_str( num__count__y , 0 , $num_h__win__id[ 'dir_list' ] + num__id__list , " " * $num__size__dirlist__x , flag__standout )
end
def listing__dir( num__id__list )
	num__id__this_win = $num_h__win__id[ 'dir_list' ] + num__id__list
	str__path = $str_a__path[ num__id__list ]
	flag__this_list_is_active = $num__active_dirlist == num__id__list
	flag__first_time_after_inactive = $num__active_dirlist != $num__active_dirlist__old

	str_a__direntry = $aah__direntry[ 'sort' ][ num__id__list ]
	add_str( 0 , 0 , $num_h__win__id[ 'path' ] + num__id__list , " " * $num__size__dirlist__x  ) #$num__size__screen__x )
	add_str( 0 , 0 , $num_h__win__id[ 'path' ] + num__id__list , str__path , true )

	num__locate__x__filename = 15
	( num__start__listing_file , num__locate__cur , num__locate__cur__old ) = num_a__get__y__locate( num__id__list )

	num__lines__draw =
		if $num_a__start__listing_file[ num__id__list ] == $num_a__start__listing_file__old[ num__id__list ] then 1
#		else 15 - $a__keybuf.length
		else 8 + ( $num__size__dirlist__y >> 1 ) - ( $a__keybuf.length << 1 )
		end
	num__lines__draw = 2 if num__lines__draw < 2
	for num__count__y in 0 .. $num__size__dirlist__y - 1
		num__count__y = $num__size__dirlist__y - 1 - num__count__y if $num_a__cur__direction[ num__id__list ] > 0
		flag__marked = $flag_aa__file__marked[ num__id__list ][ num__start__listing_file + num__count__y ]
		flag__pointed = num__count__y == num__locate__cur && flag__this_list_is_active
		flag__cleared__line = false
		if $num_a__start__listing_file[ num__id__list ] != $num_a__start__listing_file__old[ num__id__list ] then
			flag__clear__line = true
			listing__dir__clear_line( num__id__list , num__count__y , flag__pointed & flag__this_list_is_active )
		end
		if ! $flag_ah__force_redraw[ 'dir_list' ][ num__id__list ] and ! $flag__initialize then
			if ( ( num__locate__cur - num__count__y ) * $num_a__cur__direction[ num__id__list ] > num__lines__draw or
				( num__locate__cur - num__count__y ) * $num_a__cur__direction[ num__id__list ] < 0 )
			then
				next if num__locate__cur__old != num__count__y
			end
		end
		if ! flag__clear__line then
			listing__dir__clear_line( num__id__list , num__count__y , flag__pointed & flag__this_list_is_active )
		end
		if str_a__direntry.length == 0
			$win[ $num_h__win__id[ 'base' ] ].setpos( $num_a__locate__dirlist[ num__id__list ][ 0 ] + num__locate__cur , 14 + $num_a__locate__dirlist[ num__id__list ][ 1 ] )
			next
		end
#		next if $a__keybuf.length > 7
		str__filename = str_a__direntry[ num__start__listing_file + num__count__y ]
		if  str_a__direntry.length  >  num__start__listing_file + num__count__y  then
			obj = $h__file__stat[ $str_a__path[ num__id__list ] ][ str__filename ]
			add_str(
				num__count__y , num__locate__x__filename , num__id__this_win , "#{ str__filename }" ,
					flag__pointed & flag__this_list_is_active ^ flag__marked
			)
			add_str(
				num__count__y , 0 , num__id__this_win , get__str__file_stat( str__filename , 'size' , num__id__list ) ,
					flag__pointed & flag__this_list_is_active
			)
			add_str(
				num__count__y , num__locate__x__filename - 1 , num__id__this_win , get__str__file_stat( str__filename , 'execwrite' , num__id__list ) ,
					flag__pointed & flag__this_list_is_active ^ flag__pointed
			)
			add_str(
				num__count__y , $num__size__dirlist__x - 16 , num__id__this_win , get__str__file_stat( str__filename , 'mtime' , num__id__list ) ,
					flag__pointed & flag__this_list_is_active
			)
			if obj.symlink? then
				add_str(
					num__count__y , num__locate__x__filename + str__filename.length + 1 , num__id__this_win , '->' ,
						! ( flag__pointed ^ flag__marked )
				)
				add_str(
					num__count__y , num__locate__x__filename + str__filename.length + 4 , num__id__this_win , File.readlink( str__path + '/' + str__filename ) ,
						flag__pointed
				)
			end
			if flag__pointed and flag__this_list_is_active then
				add_str( 0 , 0 , $num_h__win__id[ 'info' ] , ' ' * $num__size__screen__x )
				add_str( 0 , 0 , $num_h__win__id[ 'info' ] , "#{ sprintf( \"%#04o\" , obj.mode ) } #{ str__filename }" )
				$win[ $num_h__win__id[ 'base' ] ].setpos( $num_a__locate__dirlist[ num__id__list ][ 0 ] + num__locate__cur , 14 + $num_a__locate__dirlist[ num__id__list ][ 1 ] )
			end
		end
	end

	if flag__this_list_is_active then
		if $flag__initialize then
			$flag_h__refresh[ num__id__this_win ] = true
			$flag_h__refresh[ $num_h__win__id[ 'path' ] + num__id__list ] = true
		end
		if ( $num_a__point_which_file[ num__id__list ] != $num_a__point_which_file__old[ num__id__list ] or flag__first_time_after_inactive ) then
			$flag_h__refresh[ num__id__this_win ] = true
			$flag_h__refresh[ $num_h__win__id[ 'info' ] ] = true
		end
	elsif flag__first_time_after_inactive then
		$flag_h__refresh[ num__id__this_win ] = true
		$flag_h__refresh[ $num_h__win__id[ 'path' ] + num__id__list ] = true
	end
	if $flag_ah__force_redraw[ 'dir_list' ][ num__id__list ] then
		$flag_h__refresh[ num__id__this_win ] = true
	end
end

def read__direntry( num__id__list )
	return if ! $flag_ah__initialize[ 'read__direntry' ][ num__id__list ]
	$h__file__stat[ $str_a__path[ num__id__list ] ] = {}
	[ 'orig' , 'sort' ].each{ | str__orig_sort | $aah__direntry[ str__orig_sort ][ num__id__list ] = [] }

	fp__path = Dir.open( $str_a__path[ num__id__list ] )
	begin
		fp__path.each{ | file__name | $aah__direntry[ 'orig' ][ num__id__list ].push( file__name ) }
	ensure
		fp__path.close
	end

	$flag_aa__file__marked[ num__id__list ] = []
	$aah__direntry[ 'orig' ][ num__id__list ].each{ | file__name |
		next if file__name  =~ /^\.{1,2}$/
		$aah__direntry[ 'sort' ][ num__id__list ].push( file__name )
		$flag_aa__file__marked[ num__id__list ].push( false )
	}
	$aah__direntry[ 'orig' ][ num__id__list ].each{ | file__name |
		$h__file__stat[ $str_a__path[ num__id__list ] ][ file__name ] = File.lstat( "#{ $str_a__path[ num__id__list ] }/#{ file__name }" )
	}
		a__sorting__1 = []
		a__sorting__2 = []
	$aah__direntry[ 'sort' ][ num__id__list ].each{ | file__name |
		if $h__file__stat[ $str_a__path[ num__id__list ] ][ file__name ].directory? then
			a__sorting__1.push file__name
		else
			a__sorting__2.push file__name
		end
	}
	a__sorting__1 = a__sorting__1.sort
	a__sorting__2 = a__sorting__2.sort
	$aah__direntry[ 'sort' ][ num__id__list ] = [ a__sorting__1 , a__sorting__2 ].flatten
#	$aah__direntry[ 'sort' ][ num__id__list ] = $aah__direntry[ 'sort' ][ num__id__list ].sort
	
	$num_a__point_which_file[ num__id__list ] = 0
	if $flag_a__cd_parent[ num__id__list ] then
		$num_a__point_which_file[ num__id__list ] = $aah__direntry[ 'sort' ][ num__id__list ].rindex( File.basename $str_a__path__old[ num__id__list ] )
	end
	$num_a__point_which_file[ num__id__list ] = 0 if $num_a__point_which_file[ num__id__list ] == nil
end

def init__all()
	$str__mode = 'base'
	$a__keybuf = []
	$str_a__key = [ '' ]
	$flag__initialize = true
	$flag_ah__initialize = { 'read__direntry' => [ true , true ] }
	init__curses
	$num_a__cur__direction = [ 1 , 1 ]
	$num_a__point_which_file = [ 0 , 0 ]
	$num_a__point_which_file__old = [ 0 , 0 ]
	$num_a__start__listing_file = [ 0 , 0 ]
	$num_a__start__listing_file__old = $num_a__start__listing_file.clone
	$flag_a__cd_parent = [ false ,  false ]
	$num_a__locate__cur = [ 0 , 0 ]

	$h__file__stat = {}
	$str_a__path = [ Dir.getwd , Dir.getwd ]
	$str_a__path__old = $str_a__path.clone

	$num__active_dirlist	= 0
	$num__active_dirlist__old = $num__active_dirlist.clone
	Dir.chdir $str_a__path[ $num__active_dirlist ]

	$flag_aa__file__marked = [ [] , [] ]
	$num_a__marking = [ 0 , 0 ]


	$flag_h__refresh = {}

	$ah__code__ctrl = {}
	$ah__code__ctrl[ 'edit' ] = [ 'e'[ 0 ] ]
	$ah__code__ctrl[ 'copy' ] = [ 0x63 ]
	$ah__code__ctrl[ 'kill' ] = [ 0x6b ]
	$ah__code__ctrl[ 'move' ] = [ ?m ]
	$ah__code__ctrl[ 'mkdir' ] = [ 0x6e ]
	$ah__code__ctrl[ 'jump' ] = [ 'j'[ 0 ] ]
#	$ah__code__ctrl[ 'cr' ] = [ 10 ]
	$ah__code__ctrl[ 'cr' ] = [ 13 ]
	$ah__code__ctrl[ 'space' ] = [ 0x20 ]

	$ah__code__ctrl[ 'p' ] = [ ?p ]

	$ah__code__ctrl[ 'up' ] = [ 27 , 91 , 65 ]
	$ah__code__ctrl[ 'down' ] = [ 27 , 91 , 66 ]
	$ah__code__ctrl[ 'left' ] = [ 27 , 91 , 68 ]
	$ah__code__ctrl[ 'right' ] = [ 27 , 91 , 67 ]
	$ah__code__ctrl[ 'rollup' ] = [ 27 , 91 , 53 , 126 ]
	$ah__code__ctrl[ 'rolldown' ] = [ 27 , 91 , 54 , 126 ]
	$flag_hh__code__ctrl = {}
	$ah__code__ctrl.keys.each{ | key | $flag_hh__code__ctrl[ key ] = { -1 , true } }

	$num_h__inkey__continue = { 'up' => 0.0 , 'down' => 0.0 , 'rollup' => 0.0 , 'rolldown' => 0.0 }


	$aah__direntry = {}
	$aah__direntry[ 'orig' ] = [ [] , [] ]
	$aah__direntry[ 'sort' ] = [ [] , [] ]


	$flag_ah__force_redraw = {}
	$flag_ah__force_redraw[ 'dir_list' ] = [ false , false ]
	$num__countdown__force_redraw = [ 0 , 0 ]
end

def str__files__from
	str__files = ''
	for i in 0 .. $flag_aa__file__marked[ $num__active_dirlist ].length - 1
		str__files += "#{ $aah__direntry[ 'sort' ][ $num__active_dirlist ][ i ] } " if $flag_aa__file__marked[ $num__active_dirlist ][ i ]
	end
	yield  str__files
end
def file__copy( from__path , path__to )
	return if from__path == path__to
	str__files__from{ | str__files | command__system "tar -cv -C #{ from__path } -f - #{ str__files } | tar -x -C #{ path__to } -f -" }
#		read__direntry( 1 - $num__active_dirlist )
#	from__path += '/' if from__path != ''
#	File.copy( from__path + from__file , file__to , true )
#	File.utime( $h__file__stat[ $str_a__path[ $num__active_dirlist ] ][ from__file ].atime , $h__file__stat[ $str_a__path[ $num__active_dirlist ] ][ from__file ].mtime , file__to + '/' + from__file )
end
def file__move( from__path , path__to )
	str__files__from{ | str__files | command__system "cd #{ from__path } && mv -v #{ str__files } #{ path__to }" }
#		read__direntry( $num__active_dirlist )
#		read__direntry( 1 - $num__active_dirlist )
end
def file__kill( from__path )
	str__files__from{ | str__files | command__system "cd #{ from__path } && rm -Rvi #{ str__files }" }
end
def file__mkdir( from__path )
	str__files__from{ | str__files | command__system "cd #{ from__path } && echo -n 'New-dir neme : ' && mkdir `head -n 1 /dev/stdin`" }
end


def command__system( str__command_line )
	Thread.kill( $thread__inkey )
	close_screen
	while ! $thread__inkey.stop? 
	end
	system str__command_line
#		$num_a__point_which_file[ $num__active_dirlist ] = 0
		$flag__initialize = true
	$flag_ah__initialize[ 'read__direntry' ][ $num__active_dirlist ] = true
	$flag_ah__initialize[ 'read__direntry' ][ 1 - $num__active_dirlist ] = true
	init__curses
		thread__inkey 'start'
end

def dir__chdir( str__dir )
		Dir.chdir str__dir
		$str_a__path[ $num__active_dirlist ] = Dir.getwd
	$flag_ah__initialize[ 'read__direntry' ][ $num__active_dirlist ] = true
		$flag__initialize = true
		$flag_ah__force_redraw[ 'dir_list' ][ $num__active_dirlist ] = true
	$num_a__point_which_file[ $num__active_dirlist ] = 0
end

def get__code__ctrl__2( keycode )
	flag__bingo = false
	$ah__code__ctrl.keys.each{ | key |  # key is 'up' or 'down' or ... 
		num = $ah__code__ctrl[ key ].length - 1
		while num >= 0  # scan all code
			if $ah__code__ctrl[ key ][ num ] == keycode and $flag_hh__code__ctrl[ key ][ num - 1 ] then
				flag__bingo = true
				if num != $ah__code__ctrl[ key ].length - 1 then
					$flag_hh__code__ctrl[ key ][ num ] = true
				else
					$str__key = key
					$str_a__key.push key
#					$str_a__key[0] = key
				end
				$flag_hh__code__ctrl[ key ][ num - 1 ] = false if num > 0
			end
			num -= 1
		end
	}
	return flag__bingo
end
def get__code__ctrl
	return if ! keycode = $a__keybuf.shift
		while get__code__ctrl__2 keycode
			break if ! keycode = $a__keybuf.shift
		end

#		print "--#{ keycode }-#{ $num_a__point_which_file[ $num__active_dirlist ] }-"
		if keycode == 27 then
			$flag__esc = true
		else	
			$flag__esc = false
		end
		$flag__exit = true if keycode == 113
end

def drawing
	# $mode
		[ 0 , 1 ].each{ | num__id__list |
		$flag_ah__force_redraw[ 'dir_list' ][ num__id__list ] =
			if $num__countdown__force_redraw[ num__id__list ] == 0 then true
			else false
			end
			$num__countdown__force_redraw[ num__id__list ] -= 1 if $num__countdown__force_redraw[ num__id__list ] > -65535
			listing__dir( num__id__list )
		}
#	$flag__reflesh__force = true
end

	
init__all()

$flag__esc = false

$num__countdown_to_refresh = 0
$flag__reflesh__force = true
$num__time__mark__refresh = 0
begin
	while ! $flag__exit
		$str__key = ''
		$str_a__key = []
#	$bit__direction = 0
	$num_a__point_which_file__old = $num_a__point_which_file.clone
		$num__active_dirlist__old = $num__active_dirlist.clone
		$flag_a__cd_parent[ 0 ] = false
		$flag_a__cd_parent[ 1 ] = false
#		while ! $flag__time_to_refresh
#			sleep 0.000001
#		end
		get__code__ctrl
#	Thread.kill( $thread__inkey )
		move__cursor
		read__direntry( 0 ) ; read__direntry( 1 )
		drawing

		add_str( 0 , 0 , $num_h__win__id[ 'status_line' ] , "=" * $num__size__screen__x )
		[ " Curshell ver. 0.06 designed by Seisei Yamaguchi " ].each{ | str__credit |
			add_str( 0 , $num__size__screen__x - str__credit.length - 3 , $num_h__win__id[ 'status_line' ] , str__credit )
		}
#	while ! $thread__inkey.stop? 
#	end
#	thread__inkey start

		$flag__initialize = false
		$flag_ah__initialize[ 'read__direntry' ][ 0 ] = false
		$flag_ah__initialize[ 'read__direntry' ][ 1 ] = false

		if $num__countdown_to_refresh != 0 then
			$num__countdown_to_refresh -= 1
		else
				begin
#					sleep 0.000033
					time__now = Time.now
					num__time = Time.at( time__now ).to_i * 1000000 + Time.at( time__now.usec ).to_i
				end until num__time - $num__time__mark__refresh >= 8333  # 1/120 sec
#				end until num__time - $num__time__mark__refresh >= 16666  # 1/60 sec
				$num__time__mark__refresh = num__time.clone
#			else
				$flag__refleshing = true
				$flag_h__refresh.each{ | key , value |
					if value then
						$win[ key ].refresh
						$flag_h__refresh[ key ] = false
					end
				}
#				[ 1 .. 8 ].each{ | num | $win[  ].refresh
				$win[ $num_h__win__id[ 'base' ] ].refresh 
				$flag__refleshing = false
		
			#	$flag__time_to_refresh = false
			$flag__reflesh__force = false
		$num__countdown_to_refresh = $a__keybuf.length >> 2
		end
$flag__draw__force = ! $flag__reflesh__force
	end
ensure
	close_screen
end
